name: Build and Deploy to prod

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Release version'
        required: true
        type: string
        default: 'latest'
  workflow_run:
    workflows:
      [ "Build and Deploy to non-prod", "Shortcut" ]
    types:
      - completed

env:
  environment: prod

# Ensures that only one task per branch will run at a time
concurrency:
  group: prod
  cancel-in-progress: false

jobs:
  prepare_run:
    name: "Prepare to run workflow"
    runs-on: ubuntu-latest
    environment:
      name: prod
    outputs:
      image_tag: ${{ steps.set_vars.outputs.image_tag }}
      app_name: ${{ steps.set_vars.outputs.app_name }}
      rg: ${{ steps.set_vars.outputs.rg }}
      registry_server: ${{ steps.set_vars.outputs.registry_server }}
      original_tag: ${{ steps.get_original_tag.outputs.original_tag }}
    env:
      app_name: ftr-homepage-prod
      rg: rg-appservice-homepage-prod-001
      registry_server: ftrcontainerrepo.azurecr.io
    steps:
      - name: Abort workflow_run execution
        if: ${{ github.event_name != 'workflow_dispatch' && github.event.workflow_run.conclusion != 'success' }}
        shell: pwsh
        run: |
          Write-Output "Caller workflow finished with the following status: '${{ github.event.workflow_run.conclusion }}'. Aborting execution!"
          Exit 1
      - name: Allow workflow_run execution
        if: ${{ github.event_name != 'workflow_dispatch' && github.event.workflow_run.conclusion == 'success' }}
        shell: pwsh
        run: |
          Write-Output "Caller workflow finished with the following status: '${{ github.event.workflow_run.conclusion }}'"
      - name: Allow workflow_dispatch execution
        if: ${{ github.event_name == 'workflow_dispatch' }}
        shell: pwsh
        run: |
          Write-Output "Manual workflow invocation by the following event: '${{ github.event_name }}'"
      - name: "Run build and store docker image for non-prod and prod environments"
        if: ${{ github.event_name != 'workflow_dispatch' }}
        run: |
          echo "Run build and store docker image for non-prod and prod environments. Triggered by the action: '${{ github.event_name }}'"
      - name: Code checkout
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
      - name: Execute Continuous integration
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: ./.github/actions/Build-Publish-Docker
        id: build
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          registry_server: ftrcontainerrepo.azurecr.io
          registry_username: ${{ secrets.REGISTRY_USERNAME }}
          registry_password: ${{ secrets.REGISTRY_PASSWORD }}
          environment: ${{ env.environment }}
          branch: ${{ github.event.workflow_run.head_branch }}
          dynatrace_registry: ${{ secrets.dynatrace_registry }}
          dynatrace_registry_username: ${{ secrets.dynatrace_registry_username }}
          dynatrace_registry_password: ${{ secrets.dynatrace_registry_password }}
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}
      - name: Get Current Image Tag
        id: get_original_tag
        run: |
          try {
            #$result = ((az webapp deployment slot list --name ${{ env.app_name }} --resource-group ${{ env.rg }} --output json | ConvertFrom-Json).siteConfig.linuxFxVersion).split(":")[-1]
            $query = az webapp config container show --name ${{ env.app_name }} --resource-group ${{ env.rg }} --output json --subscription ftrPAASapps | ConvertFrom-Json
            $parse = $query | ? {$_.name -eq "DOCKER_CUSTOM_IMAGE_NAME" } | % {return $_.value}
            $result = $parse.split(":")[-1]
            Write-Output "result: $result"
            if ([string]::IsNullOrEmpty("$result")) {
              Write-Output "Unable to query current image tag. Aborting execution!"
              Exit 1
            } else {
              echo "::set-output name=original_tag::$result"
            }
          } catch {
            Write-Output "[ERR] Error happened during the image tag query: '$_'"
          }
        shell: pwsh
      - name: Azure logout
        run: az logout
        shell: bash
        if: always()
      - name: Set Variables
        id: set_vars
        run: |
          if ${{ github.event_name == 'workflow_dispatch' }}
          then
            echo ::set-output name=image_tag::${{ github.event.inputs.image_tag }}
          else
            echo ::set-output name=image_tag::${{ steps.build.outputs.git-tag }}
          fi
          echo ::set-output name=app_name::${{ env.app_name }}
          echo ::set-output name=rg::${{ env.rg }}
          echo ::set-output name=registry_server::${{ env.registry_server }}
        shell: bash
      - name: Print set variables
        run: |
          echo "app_name: '${{ steps.set_vars.outputs.app_name }}'"
          echo "image_tag: '${{ steps.set_vars.outputs.image_tag }}'"
          echo "rg: '${{ steps.set_vars.outputs.rg }}'"
          echo "registry_server: '${{ steps.set_vars.outputs.registry_server }}'"
          echo "original_tag: '${{ steps.get_original_tag.outputs.original_tag }}'"
        shell: bash
      - name: "Markdown"
        shell: pwsh
        run: |
          try {
            $file = "./.github/documentation/prod_release.md"
            if (Test-Path $file) {
              Write-Output "Reading file '$file'..."
              $content = Get-Content $file -Raw
              Write-Output "Markdown file content:`r`n$content"
              echo "$content" | Out-File -FilePath $Env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
            } else {
              Write-Output "Unable to find markdown file '$file'."
            }
          } catch {
            Write-Output "Unable to render summary markdown information."
          }
  updateSlot:
    name: "Update deployment slot"
    needs: [prepare_run]
    runs-on: ubuntu-latest
    environment:
      name: prod
      url: "https://${{ needs.prepare_run.outputs.app_name }}-app-00.azurewebsites.net/pages"
    steps:
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}
      - name: Webapp deploy
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.prepare_run.outputs.app_name }}
          images: ${{ needs.prepare_run.outputs.registry_server }}/${{ github.repository }}:${{ needs.prepare_run.outputs.image_tag }}
          slot-name: "app-00"
      - name: Perform Reboot
        shell: pwsh
        run: |
          Write-Output "First reboot per Dynatrace"
          az webapp restart --name ${{ needs.prepare_run.outputs.app_name }} --resource-group ${{ needs.prepare_run.outputs.rg }} --slot app-00
          Write-Output "Rebooted. Sleeping for 5 seconds..."
          Start-Sleep -s 5
          Write-Output "Second reboot per Dynatrace"
          az webapp restart --name ${{ needs.prepare_run.outputs.app_name }} --resource-group ${{ needs.prepare_run.outputs.rg }} --slot app-00
          Write-Output "Done with reboots"
      - name: Azure logout
        run: az logout
        shell: bash
        if: always()
  #Gate1
  testing_gate1:
    name: "Testing Gate1"
    needs: [prepare_run, updateSlot]
    runs-on: ubuntu-latest
    environment:
      name: prod_gate1_approvers
    steps:
      - name: "Gate to perform testing of the Slot instance with the updated image"
        run: |
          echo "Waiting for the testing to complete. Slot instance image tag is: '${{ needs.prepare_run.outputs.image_tag }}'"
  #Approved
  swapSlotToProd_gate1:
    name: "Swap production and slot instances"
    needs: [prepare_run, testing_gate1]
    runs-on: ubuntu-latest
    environment:
      name: prod
      url: "https://${{ needs.prepare_run.outputs.app_name }}.azurewebsites.net/pages"
      #url: "https://frontier.com/pages"
    steps:
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}
      - name: Perform Swap
        shell: pwsh
        run: |
          [Int32]$Retries = 30
          [Int32]$SecondsDelay = 60
          [Int32]$retrycount = 0
          [Bool]$completed = $false

          try {
            while (-not $completed) {
              $Error.Clear()
              $result = (az webapp deployment slot swap --name ${{ needs.prepare_run.outputs.app_name }} --resource-group ${{ needs.prepare_run.outputs.rg }} --slot app-00 --target-slot production) 2>&1

              if ($Error) {
                if ($Error[0].Exception.Message.StartsWith("ERROR: Cannot modify this site because another operation is in progress.")) {
                    $myMsg = "Cannot modify this site because another operation is in progress"
                } else {
                    Write-Warning "Unhandled error for the AZ swap command"
                    Throw $Error
                }
                
                if ($retrycount -ge $Retries) {
                  $myMsg = "AZ swap command failed the maximum retry number of '$retryCount' times"
                  Write-Warning $myMsg
                  Throw $Error
                } else {
                  Write-Warning "$myMsg. Retrying in '$SecondsDelay' seconds"
                  Start-Sleep $SecondsDelay
                  $retrycount++
                  continue
                }
              } else {
                Write-Output "Swapped successfully"
                $completed = $true
              }    
            }
          } catch {
              Write-Output "[ERR] Error happened during the swap. Details: $($_ | Out-String)"
          } finally {
              $Error.Clear()
          }        
      - name: Azure logout
        run: az logout
        shell: bash
        if: always()
  #Rejected
  rollback_updateSlot_gate1:
    name: "Reject: Restore deployment slot image"
    needs: [prepare_run, testing_gate1]
    runs-on: ubuntu-latest
    environment:
      name: prod
    if: ${{ always() && (needs.testing_gate1.result == 'failure' || needs.testing_gate1.result == 'cancelled') }}
    steps:
      - name: Approval gate status
        run: |
          echo "Testing gate status is: '${{ needs.testing_gate1.result }}'. Previous action(s) rollback is required"
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}
      - name: Webapp deploy
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.prepare_run.outputs.app_name }}
          images: ${{ needs.prepare_run.outputs.registry_server }}/${{ github.repository }}:${{ needs.prepare_run.outputs.original_tag }}
          slot-name: "app-00"
      - name: Azure logout
        run: az logout
        shell: bash
        if: always()
      - name: Aboart execution
        shell: pwsh
        run: |
          Exit 1
  #Gate2
  testing_gate2:
    name: "Testing Gate2"
    needs: [prepare_run, swapSlotToProd_gate1]
    runs-on: ubuntu-latest
    environment:
      name: prod_gate2_approvers
    steps:
      - name: "Gate to perform testing of the Production instance with the updated image"
        run: |
          echo "Waiting for the testing to complete. Production instance image tag is: '${{ needs.prepare_run.outputs.image_tag }}'"
  #Approved
  updateNewSlot_gate2:
    name: "Update deployment slot"
    needs: [prepare_run, testing_gate2]
    runs-on: ubuntu-latest
    environment:
      name: prod
    steps:
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}
      - name: Webapp deploy
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.prepare_run.outputs.app_name }}
          images: ${{ needs.prepare_run.outputs.registry_server }}/${{ github.repository }}:${{ needs.prepare_run.outputs.image_tag }}
          slot-name: "app-00"
      - name: Perform Reboot
        shell: pwsh
        run: |
          Write-Output "First reboot per Dynatrace"
          az webapp restart --name ${{ needs.prepare_run.outputs.app_name }} --resource-group ${{ needs.prepare_run.outputs.rg }} --slot app-00
          Write-Output "Rebooted. Sleeping for 5 seconds..."
          Start-Sleep -s 5
          Write-Output "Second reboot per Dynatrace"
          az webapp restart --name ${{ needs.prepare_run.outputs.app_name }} --resource-group ${{ needs.prepare_run.outputs.rg }} --slot app-00
          Write-Output "Done with reboots"
      - name: Azure logout
        run: az logout
        shell: bash
        if: always()
  #Rejected
  rollback_swapSlotToProd_gate2:
    name: "Reject: Swap production and slot instances"
    needs: [prepare_run, testing_gate2]
    runs-on: ubuntu-latest
    environment:
      name: prod
    if: ${{ always() && (needs.testing_gate2.result == 'failure' || needs.testing_gate2.result == 'cancelled') }}
    steps:
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}
      - name: Perform Swap
        shell: pwsh
        run: |
          [Int32]$Retries = 30
          [Int32]$SecondsDelay = 60
          [Int32]$retrycount = 0
          [Bool]$completed = $false

          try {
            while (-not $completed) {
              $Error.Clear()
              $result = (az webapp deployment slot swap --name ${{ needs.prepare_run.outputs.app_name }} --resource-group ${{ needs.prepare_run.outputs.rg }} --slot app-00 --target-slot production) 2>&1

              if ($Error) {
                if ($Error[0].Exception.Message.StartsWith("ERROR: Cannot modify this site because another operation is in progress.")) {
                    $myMsg = "Cannot modify this site because another operation is in progress"
                } else {
                    Write-Warning "Unhandled error for the AZ swap command"
                    Throw $Error
                }
                
                if ($retrycount -ge $Retries) {
                  $myMsg = "AZ swap command failed the maximum retry number of '$retryCount' times"
                  Write-Warning $myMsg
                  Throw $Error
                } else {
                  Write-Warning "$myMsg. Retrying in '$SecondsDelay' seconds"
                  Start-Sleep $SecondsDelay
                  $retrycount++
                  continue
                }
              } else {
                Write-Output "Swapped successfully"
                $completed = $true
              }    
            }
          } catch {
              Write-Output "[ERR] Error happened during the swap. Details: $($_ | Out-String)"
          } finally {
              $Error.Clear()
          }           
      - name: Azure logout
        run: az logout
        shell: bash
        if: always()
  rollback_updateSlot_gate2:
    if: ${{ always() && (needs.testing_gate2.result == 'failure' || needs.testing_gate2.result == 'cancelled') }}
    name: "Reject: Restore deployment slot image"
    needs: [prepare_run, testing_gate2, rollback_swapSlotToProd_gate2]
    runs-on: ubuntu-latest
    environment:
      name: prod
    steps:
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}
      - name: Webapp deploy
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.prepare_run.outputs.app_name }}
          images: ${{ needs.prepare_run.outputs.registry_server }}/${{ github.repository }}:${{ needs.prepare_run.outputs.original_tag }}
          slot-name: "app-00"
      - name: Azure logout
        run: az logout
        shell: bash
        if: always()
      - name: Aboart execution
        shell: pwsh
        run: |
          Exit 1

#Notes:
    #if: ${{ needs.testing_gate1.result == 'success' }} -> approved
    #if: ${{ needs.testing_gate1.result == 'failure' }} -> rejected
    #if: ${{ needs.testing_gate1.result == 'cancelled' }} -> cancelled workflow on needs job
    #if: ${{ needs.testing_gate1.result == 'skipped' }} -> cancelled workflow prior needs job
