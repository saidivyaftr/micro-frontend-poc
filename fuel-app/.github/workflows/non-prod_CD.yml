name: Build and Deploy to non-prod

on:
  push:
    branches:
      - releases/**
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Release version'
        required: true
        type: string
        default: 'latest'

env:
  environment: nonprod

# Ensures that only one task per branch will run at a time
concurrency:
  group: nonprod
  cancel-in-progress: true

jobs:
  docker:
    name: "Build and store Docker image"
    runs-on: ubuntu-latest
    environment: 
      name: nonprod
    outputs:
      image_tag: ${{ steps.set_vars.outputs.image_tag }}
      app_name: ${{ steps.set_vars.outputs.app_name }}
      rg: ${{ steps.set_vars.outputs.rg }}
      registry_server: ${{ steps.set_vars.outputs.registry_server }}
      original_tag: ${{ steps.get_original_tag.outputs.original_tag }}
      original_cfg: ${{ steps.set_vars.outputs.original_cfg }}
      settingsFromJSON: ${{ steps.set_vars.outputs.settingsFromJSON }}
    env:
      app_name: ftr-homepage-nonprod
      rg: rg-appservice-homepage-nonprod-001
      registry_server: ftrcontainerrepo.azurecr.io
    steps:
      - name: "Run build and store docker image for non-prod and prod environments"
        if: ${{ github.event_name != 'workflow_dispatch' }} 
        run: |
          echo "Run build and store docker image for non-prod and prod environments. Triggered by the action: '${{ github.event_name }}'"
      - name: Code checkout
        uses: actions/checkout@v3
      - name: Execute Continuous integration
        if: ${{ github.event_name != 'workflow_dispatch' }}    
        uses: ./.github/actions/Build-Publish-Docker
        id: build
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          registry_server: ftrcontainerrepo.azurecr.io
          registry_username: ${{ secrets.REGISTRY_USERNAME }}
          registry_password: ${{ secrets.REGISTRY_PASSWORD }}
          environment: ${{ env.environment }}
      - name: Parse JSON
        id: parse_json
        uses: ./.github/actions/ParseJson
        with:
          file_path: "appSettings.json"
          env: ${{ env.environment }}
      - name: Compose appservice settings string
        id: composeSettingsFromJson
        uses: ./.github/actions/StringComposer
        with:
          identifier: "webappSettings"
          string: ${{ steps.parse_json.outputs.settings }}          
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}
      - name: Get Current Image Tag
        id: get_original_tag
        run: |
          try {
            #$result = ((az webapp deployment slot list --name ${{ env.app_name }} --resource-group ${{ env.rg }} --output json | ConvertFrom-Json).siteConfig.linuxFxVersion).split(":")[-1]
            $query = az webapp config container show --name ${{ env.app_name }} --resource-group ${{ env.rg }} --output json --subscription ftrPAASapps | ConvertFrom-Json
            $parse = $query | ? {$_.name -eq "DOCKER_CUSTOM_IMAGE_NAME" } | % {return $_.value}
            $result = $parse.split(":")[-1]
            Write-Output "result: $result"
            if ([string]::IsNullOrEmpty("$result")) {
              Write-Output "Unable to query current image tag. Aborting execution!"
              Exit 1
            } else {
              echo "original_tag=$result" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append 
            }
          } catch {
            Write-Output "[ERR] Error happened during the image tag query: '$_'"
          }
        shell: pwsh
      - name: Get Current Config
        id: get_original_cfg
        run: |
          try {
            $Error.Clear()
            $original_cfg = (az webapp config appsettings list --name ${{ env.app_name }} --resource-group ${{ env.rg }} --output json | ConvertFrom-Json) 2>&1
            #Write-Output $original_cfg

            if ($Error) {
              $myMsg = "Get current config command returned error: $(($Error[0].Exception.Message).ToString())"
              Throw $myMsg
            } else {
              Write-Output "Current appsettings received successfully"
              [String]$str = "["
              foreach($item in $original_cfg)
              {
                  if ($($item.name) -eq "DOCKER_REGISTRY_SERVER_PASSWORD") { continue }
                  $str += "{ `"name`": `"$($item.name)`", `"value`" : `"$($item.value)`" }, "
              }
              $str = $str.TrimEnd(" ")
              $str = $str.TrimEnd(",")
              $str += "]"
              $str = $str -replace "`t|`n|`r",""

              echo "original_cfg=$str" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append 
            } 
          } catch {
              Write-Output "[ERR] Error happened during the webapp appsettings config query: '$_'"
              $Error.Clear()
          }
        shell: pwsh          
      - name: Azure logout
        run: az logout
        shell: bash
        if: always()
      - name: Set Variables
        id: set_vars
        run: |
          if ${{ github.event_name == 'workflow_dispatch' }}
          then
            echo "image_tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "image_tag=${{ steps.build.outputs.git-tag }}" >> $GITHUB_OUTPUT
          fi
          echo "app_name=${{ env.app_name }}" >> $GITHUB_OUTPUT
          echo "rg=${{ env.rg }}" >> $GITHUB_OUTPUT
          echo "registry_server=${{ env.registry_server }}" >> $GITHUB_OUTPUT
          myStr='${{ steps.composeSettingsFromJson.outputs.composedString }}'
          Str2Base64=$(echo $myStr | base64 --wrap=0)
          echo "settingsFromJSON=$(echo $Str2Base64)" >> $GITHUB_OUTPUT
          myStr='${{ steps.get_original_cfg.outputs.original_cfg }}'
          Str2Base64=$(echo $myStr | base64 --wrap=0)
          echo "original_cfg=$(echo $Str2Base64)" >> $GITHUB_OUTPUT
        shell: bash   
      - name: Print set variables
        run: |
          echo "app_name: '${{ steps.set_vars.outputs.app_name }}'"
          echo "image_tag: '${{ steps.set_vars.outputs.image_tag }}'"
          echo "rg: '${{ steps.set_vars.outputs.rg }}'"
          echo "registry_server: '${{ steps.set_vars.outputs.registry_server }}'"
          echo "original_tag: '${{ steps.get_original_tag.outputs.original_tag }}'"
        shell: bash  
  updateSlot:
    name: "Update deployment slot1"
    needs: [docker]
    runs-on: ubuntu-latest  
    environment: 
      name: nonprod
      url: "https://${{ needs.docker.outputs.app_name }}-app-00.azurewebsites.net/pages"      
    steps:
      - name: Set variables
        id: set_vars
        run: |
          myStr='${{ needs.docker.outputs.settingsFromJSON }}'
          StrFromBase64=$(echo $myStr | base64 --decode)
          echo "settingsFromJSON=$(echo $StrFromBase64)" >> $GITHUB_OUTPUT
        shell: bash 
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}
      - name: Update appservice settings
        uses: azure/appservice-settings@v1
        id: updateConfig
        with:
          app-name: ${{ needs.docker.outputs.app_name }}
          app-settings-json: ${{ steps.set_vars.outputs.settingsFromJSON }}
          slot-name: "app-00"
      - name: Update secrets in config
        run: |
          az webapp config appsettings set --name  ${{ needs.docker.outputs.app_name }} --settings SITECORE_API_KEY=${{ secrets.SITECORE_API_KEY }} --resource-group ${{ needs.docker.outputs.rg }} --slot app-00 --output none
        shell: bash
      - name: Webapp deploy
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.docker.outputs.app_name }} 
          images: ${{ needs.docker.outputs.registry_server }}/${{ github.repository }}:${{ needs.docker.outputs.image_tag }}
          slot-name: "app-00"
      - name: Azure logout
        run: az logout
        shell: bash
        if: always()
  #Gate1
  testing_gate1:
    name: "Testing Gate1"
    needs: [docker, updateSlot]
    runs-on: ubuntu-latest  
    environment: 
      name: nonprod
    env:
      status_code: 200
      url: "https://${{ needs.docker.outputs.app_name }}-app-00.azurewebsites.net/pages"
    steps:
      - name: "Gate to perform testing of the Slot instance with the updated image"
        run: |
          echo "Waiting for the testing to complete. Slot instance image tag is: '${{ needs.docker.outputs.image_tag }}'"
      - name: Code checkout    
        uses: actions/checkout@v3
      - name: "Health check"
        uses: ./.github/actions/HealthCheck
        id: hc
        with:
          url: ${{ env.url }}
          status_code: ${{ env.status_code }}
  #Approved
  swapSlotToProd_gate1:
    name: "Swap production and slot instances"
    needs: [docker, testing_gate1]
    runs-on: ubuntu-latest  
    environment: 
      name: nonprod
      #url: "https://${{ needs.docker.outputs.app_name }}.azurewebsites.net/pages" 
      url: "https://qat02.frontier.com/pages"      
    steps:
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}
      - name: Perform Swap
        shell: pwsh
        run: |
          [Int32]$Retries = 30
          [Int32]$SecondsDelay = 60
          [Int32]$retrycount = 0
          [Bool]$completed = $false

          try {
            while (-not $completed) {
              $Error.Clear()
              $result = (az webapp deployment slot swap --name ${{ needs.docker.outputs.app_name }} --resource-group ${{ needs.docker.outputs.rg }} --slot app-00 --target-slot production) 2>&1

              if ($Error) {
                if ($Error[0].Exception.Message.StartsWith("ERROR: Cannot modify this site because another operation is in progress.")) {
                    $myMsg = "Cannot modify this site because another operation is in progress"
                } else {
                    Write-Warning "Unhandled error for the AZ swap command"
                    Throw $Error
                }
                
                if ($retrycount -ge $Retries) {
                  $myMsg = "AZ swap command failed the maximum retry number of '$retryCount' times"
                  Write-Warning $myMsg
                  Throw $Error
                } else {
                  Write-Warning "$myMsg. Retrying in '$SecondsDelay' seconds"
                  Start-Sleep $SecondsDelay
                  $retrycount++
                  continue
                }
              } else {
                Write-Output "Swapped successfully"
                $completed = $true
              }    
            }
          } catch {
              Write-Output "[ERR] Error happened during the swap. Details: $($_ | Out-String)"
          } finally {
              $Error.Clear()
          }
      - name: Azure logout
        run: az logout
        shell: bash
        if: always()
  #Rejected
  rollback_updateSlot_gate1:
    name: "Reject: Restore deployment slot image"
    needs: [docker, testing_gate1]
    runs-on: ubuntu-latest  
    environment: 
      name: nonprod
    if: ${{ always() && (needs.testing_gate1.result == 'failure' || needs.testing_gate1.result == 'cancelled') }}
    steps:
      - name: Approval gate status
        run: |
          echo "Testing gate status is: '${{ needs.testing_gate1.result }}'. Previous action(s) rollback is required"   
      - name: Set variables
        id: set_vars
        run: |
          myStr='${{ needs.docker.outputs.original_cfg }}'
          StrFromBase64=$(echo $myStr | base64 --decode)
          echo "original_cfg=$(echo $StrFromBase64)" >> $GITHUB_OUTPUT 
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}
      - name: Restore appservice settings
        uses: azure/appservice-settings@v1
        with:
          app-name: ${{ needs.docker.outputs.app_name }}
          app-settings-json: ${{ steps.set_vars.outputs.original_cfg }}
          slot-name: "app-00"
      - name: Webapp deploy
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.docker.outputs.app_name }} 
          images: ${{ needs.docker.outputs.registry_server }}/${{ github.repository }}:${{ needs.docker.outputs.original_tag }}
          slot-name: "app-00"
      - name: Azure logout
        run: az logout
        shell: bash
        if: always()
      - name: Aboart execution
        shell: pwsh
        run: |
          Exit 1
  #Gate2
  testing_gate2:
    name: "Testing Gate2"
    needs: [docker, swapSlotToProd_gate1]
    runs-on: ubuntu-latest
    environment: 
      name: nonprod
    env:
      status_code: 200
      #url: "https://${{ needs.docker.outputs.app_name }}.azurewebsites.net/pages"
      url: "https://qat02.frontier.com/pages"
    steps:
      - name: "Gate to perform testing of the Production instance with the updated image"
        run: |
          echo "Waiting for the testing to complete. Production instance image tag is: '${{ needs.docker.outputs.image_tag }}'"
      - name: Code checkout    
        uses: actions/checkout@v3
      - name: "Health check"
        uses: ./.github/actions/HealthCheck
        id: hc
        with:
          url: ${{ env.url }}
          status_code: ${{ env.status_code }}
  #Approved
  updateNewSlot_gate2:
    name: "Update deployment slot2"
    needs: [docker, testing_gate2]
    runs-on: ubuntu-latest  
    environment: 
      name: nonprod
    outputs:
      image_tag: ${{ needs.docker.outputs.image_tag }}
      registry_server: ${{ needs.docker.outputs.registry_server }}
    steps:
      - name: Set variables
        id: set_vars
        run: |
          myStr='${{ needs.docker.outputs.settingsFromJSON }}'
          StrFromBase64=$(echo $myStr | base64 --decode)
          echo "settingsFromJSON=$(echo $StrFromBase64)" >> $GITHUB_OUTPUT      
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}
      - name: Update appservice settings
        uses: azure/appservice-settings@v1
        id: updateConfigSlot
        with:
          app-name: ${{ needs.docker.outputs.app_name }}
          app-settings-json: ${{ steps.set_vars.outputs.settingsFromJSON }}
          slot-name: "app-00"
      - name: Update secrets in config
        run: |
          az webapp config appsettings set --name  ${{ needs.docker.outputs.app_name }} --settings SITECORE_API_KEY=${{ secrets.SITECORE_API_KEY }} --resource-group ${{ needs.docker.outputs.rg }} --slot app-00 --output none
        shell: bash
      - name: Webapp deploy
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.docker.outputs.app_name }} 
          images: ${{ needs.docker.outputs.registry_server }}/${{ github.repository }}:${{ needs.docker.outputs.image_tag }}
          slot-name: "app-00" 
      - name: Code checkout    
        uses: actions/checkout@v3
      - name: "Markdown"
        shell: pwsh
        run: |
          try {
            $file = "./.github/documentation/nonprod_release.md"
            if (Test-Path $file) {
              Write-Output "Reading file '$file'..."
              $content = Get-Content $file -Raw
              Write-Output "Markdown file content:`r`n$content" 
              echo "$content" | Out-File -FilePath $Env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
            } else {
              Write-Output "Unable to find markdown file '$file'."
            }
          } catch {
            Write-Output "Unable to render summary markdown information."
          }
      - name: Azure logout
        run: az logout
        shell: bash
        if: always()
  post_Deployment:
    if: ${{ needs.updateNewSlot_gate2.result == 'success' }}
    name: "Post deployment approval"
    needs: [updateNewSlot_gate2]
    runs-on: ubuntu-latest  
    environment:
      name: image_signing_approvers
    steps:
      #- name: "Gate to perform image tag signing"
      #  run: |
      #    echo "Post deployhment approval to sign the image with the tag '${{ needs.updateNewSlot_gate2.outputs.image_tag }}'"
      #  shell: bash        
      - name: Save artifact
        env:
          artifact: ${{ needs.updateNewSlot_gate2.outputs.image_tag }}
        run: |
          mkdir -p ./Artifact
          echo $artifact > ./Artifact/image_tag
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: image_tag
          path: Artifact/
      #- name: Enable client content trust
      #  run: |
      #    # Enable content trust for shell session
      #    export DOCKER_CONTENT_TRUST=1
      #    docker trust sign ${{ needs.updateNewSlot_gate2.outputs.registry_server }}/${{ github.repository }}:${{ needs.updateNewSlot_gate2.outputs.image_tag }}
      #  shell: bash  
  #Rejected
  rollback_swapSlotToProd_gate2:
    name: "Reject: Swap production and slot instances"
    needs: [docker, testing_gate2]
    runs-on: ubuntu-latest  
    environment: 
      name: nonprod
    outputs:
      original_tag: ${{ needs.docker.outputs.original_tag }}
      app_name: ${{ needs.docker.outputs.app_name }} 
      registry_server: ${{ needs.docker.outputs.registry_server }}
      original_cfg: ${{ needs.docker.outputs.original_cfg }}
    if: ${{ always() && (needs.testing_gate2.result == 'failure' || needs.testing_gate2.result == 'cancelled') }}
    steps:
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}
      - name: Perform Swap
        shell: pwsh
        run: |
          [Int32]$Retries = 30
          [Int32]$SecondsDelay = 60
          [Int32]$retrycount = 0
          [Bool]$completed = $false

          try {
            while (-not $completed) {
              $Error.Clear()
              $result = (az webapp deployment slot swap --name ${{ needs.docker.outputs.app_name }} --resource-group ${{ needs.docker.outputs.rg }} --slot app-00 --target-slot production) 2>&1

              if ($Error) {
                if ($Error[0].Exception.Message.StartsWith("ERROR: Cannot modify this site because another operation is in progress.")) {
                    $myMsg = "Cannot modify this site because another operation is in progress"
                } else {
                    Write-Warning "Unhandled error for the AZ swap command"
                    Throw $Error
                }
                
                if ($retrycount -ge $Retries) {
                  $myMsg = "AZ swap command failed the maximum retry number of '$retryCount' times"
                  Write-Warning $myMsg
                  Throw $Error
                } else {
                  Write-Warning "$myMsg. Retrying in '$SecondsDelay' seconds"
                  Start-Sleep $SecondsDelay
                  $retrycount++
                  continue
                }
              } else {
                Write-Output "Swapped successfully"
                $completed = $true
              }    
            }
          } catch {
              Write-Output "[ERR] Error happened during the swap. Details: $($_ | Out-String)"
          } finally {
              $Error.Clear()
          }        
      - name: Azure logout
        run: az logout
        shell: bash
        if: always()
  rollback_updateSlot_gate2:
    if: ${{ always() && (needs.rollback_swapSlotToProd_gate2.result == 'success') }}
    name: "Reject: Restore deployment slot image"
    needs: [rollback_swapSlotToProd_gate2]
    runs-on: ubuntu-latest  
    environment: 
      name: nonprod
    steps:
      - name: Set variables
        id: set_vars
        run: |
          myStr='${{ needs.rollback_swapSlotToProd_gate2.outputs.original_cfg }}'
          StrFromBase64=$(echo $myStr | base64 --decode)
          echo "original_cfg=$(echo $StrFromBase64)" >> $GITHUB_OUTPUT
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS  }}
      - name: Restore appservice settings
        uses: azure/appservice-settings@v1
        with:
          app-name: ${{ needs.docker.outputs.app_name }}
          app-settings-json: ${{ steps.set_vars.outputs.original_cfg }}
          slot-name: "app-00"
      - name: Webapp deploy
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.rollback_swapSlotToProd_gate2.outputs.app_name }} 
          images: ${{ needs.rollback_swapSlotToProd_gate2.outputs.registry_server }}/${{ github.repository }}:${{ needs.rollback_swapSlotToProd_gate2.outputs.original_tag }}
          slot-name: "app-00"
      - name: Azure logout
        run: az logout
        shell: bash
        if: always()
      - name: Aboart execution
        shell: pwsh
        run: |
          Exit 1  
  #post_Approvals:
  #  if: success()
    #if: ${{ always() && !cancelled() && needs.docker.result == 'success' && needs.updateSlot.result == 'success' && needs.testing_gate1.result == 'success' && needs.swapSlotToProd_gate1.result == 'success' && needs.testing_gate2.result == 'success' && needs.updateNewSlot_gate2.result == 'success' }}
    #needs: [
    #  docker,
    #  updateSlot,
    #  testing_gate1,
    #  swapSlotToProd_gate1,
    #  testing_gate2,
    #  updateNewSlot_gate2
    #]
  #  runs-on: ubuntu-latest 
  #  steps:
  #    - name: "Image signing"
  #      run: |
  #        echo "Approve to sign deployed image with the tag: '${{ needs.testing_gate2.result }}'"

#Notes:
    #if: ${{ needs.testing_gate1.result == 'success' }} -> approved
    #if: ${{ needs.testing_gate1.result == 'failure' }} -> rejected
    #if: ${{ needs.testing_gate1.result == 'cancelled' }} -> cancelled workflow on needs job
    #if: ${{ needs.testing_gate1.result == 'skipped' }} -> cancelled workflow prior needs job  