name: "Convert string into the formatted string"
description: "Convert string into the formatted string"

inputs:
  identifier:
    description: "Defines format of an output string"
    required: true
    default: 'simpleString'
    type: choice
    options:
    - simpleString
    - webappSettings   
  string:
    description: "Key = value formatted string"
    required: true

outputs:
  composedString:
    description: "Returned string"
    value: ${{ steps.composeStr.outputs.composedString }}

runs:
  using: "composite"
  steps:
  - name: "Compose string"
    id: composeStr
    shell: pwsh
    run: |
      try {
        [String]$stringType = "${{ inputs.identifier }}"
        [String]$settings = "${{ inputs.string }}"
        [String]$str = ""
        
        try {
          # there is a problem with Bash handling powershell '`n' character
          # hence below replace is required
          $settings = $settings.replace("<new_line>", "`n")
          [Hashtable]$HT = ConvertFrom-StringData -StringData $settings
        } catch {
          $msg = "[ERR] Unexpected error to convert from string data." 
          Write-Output $msg
          $Error.Clear()
          throw $msg
        }

        if ($stringType -ne "simpleString" -and $stringType -ne "webappSettings") {
          $msg = "[ERR] Unsupported conversion format type '$stringType'."
          Write-Output $msg
          $Error.Clear()
          throw $msg
        }

        Write-Output "Composing appservice settings string"
        $str += "["
        $HT.GetEnumerator() | ForEach-Object {
          if ($stringType -eq "webappSettings") {
            if ($($_.value) -eq "GITHUB_SECRET") {
              #$secret = """`$<DoubleLeftCurlyBracket> secrets.$($_.key) }}"""
              #$secret = """`$$([char]0x7B)$([char]0x7B) secrets.$($_.key) $([char]0x7D)$([char]0x7D)"""
              #$secret = """<DollarChar>{{ secrets.$($_.key) }}"""
              #$str += "{ ""name"": ""$($_.key)"", ""value"" : $secret }, "
              return
            } else {
              $str += "{ ""name"": ""$($_.key)"", ""value"" : ""$($_.value)"" }, "
            }
          } else {
              $str += "$($_.key) = $($_.value), "
          }
        }
        $str = $str.TrimEnd(" ")
        $str = $str.TrimEnd(",")
        $str += "]"
        $str = $str -replace "`t|`n|`r",""

        # Base64 encoding
        # $str = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($str))

        Write-Output "Action execution completed successfully"
        echo "composedString=$str" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append                    
        Exit 0
      } catch {
        Write-Output "[ERR]: $($_.Exception)"
        Write-Output "Execution failed"
        Exit 1
      }