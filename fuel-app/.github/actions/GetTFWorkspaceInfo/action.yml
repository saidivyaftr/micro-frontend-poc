name: "Get Terraform Workspace"
description: "Get Terraform Workspace information"

inputs:
  tf_token:
    description: "Terraform token"
    required: true
  tf_wsp_name:
    description: "Terraform Workspace name to search for"
    required: true

outputs:
  wsp_id:
    description: "Internal Terraform Workspace id"
    value: ${{ steps.getInfo.outputs.wsp_id }}
  skip_flag:
    description: "Flag to skip other steps or jobs"
    value: ${{ steps.getInfo.outputs.skip_flag }}    

runs:
  using: "composite"
  steps:
  - name: "Get Terraform Workspace information"
    id: getInfo
    shell: pwsh
    run: |
      try {
        [String]$token = "${{ inputs.tf_token }}"
        [String]$wspName = "${{ inputs.tf_wsp_name }}"
        [String]$uri = "https://app.terraform.io/api/v2/organizations/${{env.organization}}/workspaces?search%5Bname%5D=$wspName"
        [String]$organization = "${{env.organization}}"
        [String]$workspaceId = ""
        [String]$skip_flag = ""        

        $headers = @{
          'Authorization' = "Bearer ${{ inputs.tf_token }}"
          'Content-Type' = 'application/vnd.api+json'
        }

        Write-Host "Get workspace '$wspName' id from Terraform"
        try {
          $response = Invoke-WebRequest -UseBasicParsing -Uri $uri -Method Get -Headers $headers
        } catch {
          $msg = "Unexpected response received. Status Code : '$($_.Exception.Response.StatusCode.Value__)'. Description : '$($_.Exception.Response.StatusDescription)'."
          Throw "$msg Details:`r`n`t$($_)"
        }

        if ($response.statuscode -eq '200') {
          $json = $response.ToString() | ConvertTo-Json | ConvertFrom-Json
          $myObj = $json | Out-String | ConvertFrom-Json
          $workspaceId = $myObj.data.id
          Write-Host "Terraform '$wspName' Workspace id '$workspaceId' successfully retrieved"
          
          if ([string]::IsNullOrEmpty($workspaceId)) { 
            $skip_flag = "yes"
            Write-Host "No workspace with the name '$wspName' was found in '$organization' organization. Nothing to destroy and cleanup."
            Write-Host "Action execution completed successfully"
            Write-Host "Skip flag is set to: '$skip_flag'"
            echo "::set-output name=skip_flag::$skip_flag"
            Exit 0            
          }
        } else {
          $msg = "Unexpected response code '$($response.statuscode)' received."
          Throw $msg
        }

        Write-Host "Action execution completed successfully"
        echo "::set-output name=wsp_id::$workspaceId"
        Exit 0
      } catch {
        Write-Host "[ERR]: $($_.Exception)"
        Write-Host "Action execution failed"
        Exit 1
      }