name: "Get Terraform Variable"
description: "Get Terraform Variable"

inputs:
  tf_token:
    description: "Terraform token"
    required: true
  tf_var_name:
    description: "Terraform variable to search for"
    required: true

outputs:
  var_id:
    description: "Internal Terraform variable id"
    value: ${{ steps.getVar.outputs.var_id }}
  var_value:
    description: "Value assigned to Terraform variable"
    value: ${{ steps.getVar.outputs.var_value }}

runs:
  using: "composite"
  steps:
  - name: "Get Terraform variable"
    id: getVar
    shell: pwsh
    run: |
      try {
        [String]$token = "${{ inputs.tf_token }}"
        [String]$uri = "https://app.terraform.io/api/v2/vars?filter[organization][name]=${{env.organization}}&filter[workspace][name]=${{env.workspace}}"
        [String]$varName = "${{ inputs.tf_var_name }}"
        [Int32]$i = 0
        [String]$key = ""
        [String]$value = ""
        [String]$id = ""
        [String]$varId = ""
        [Bool]$bExists = $false

        $headers = @{
          'Authorization' = "Bearer ${{ inputs.tf_token }}"
          'Content-Type' = 'application/vnd.api+json'
        }

        Write-Host "Get '$varName' variable value from Terraform"
        try {
          $response = Invoke-WebRequest -UseBasicParsing -Uri $uri -Method Get -Headers $headers
        } catch {
          $msg = "Unexpected response received. Status Code : '$($_.Exception.Response.StatusCode.Value__)'. Description : '$($_.Exception.Response.StatusDescription)'."
          Throw "$msg Details:`r`n`t$($_)"
        }

        if ($response.statuscode -eq '200') {
          Write-Host "API Get call was successful"
          $json = $response.ToString() | ConvertTo-Json | ConvertFrom-Json
        } else {
          $msg = "Unexpected response code '$($response.statuscode)' received."
          Throw $msg
        }

        $myObj = $json | Out-String | ConvertFrom-Json
        foreach ($item in $myObj.data.attributes) {
            if ($item.key -eq $varName) {
                $key = $item.Key
                $Value = $item.Value
                $bExists = $true
                break
            }
          $i++
        }        
          
        if ($bExists) {
          $varId = ($myObj.data.id)[$i]
          Write-Host "Found in Terraform variable '$key' with the id '$varId' and value '$value'"
        } else {
          Throw "Variable '$varName' was not found in Terraform. Aboring execution"
        }

        Write-Host "Action execution completed successfully"
        echo "::set-output name=var_id::$varId"
        echo "::set-output name=var_value::$value" 
        Exit 0
      } catch {
        Write-Host "[ERR]: $($_.Exception)"
        Write-Host "Action execution failed"
        Exit 1
      }    