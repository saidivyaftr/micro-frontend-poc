name: "Set Terraform Variable"
description: "Set Terraform Variable"

inputs:
  tf_token:
    description: "Terraform token"
    required: true   
  tf_var_value:
    description: "Value Terraform variable will be set to"
    required: false
  tf_var_id:
    description: "Terraform variable internal id"
    required: true    

runs:
  using: "composite"
  steps:
  - name: "Set Terraform variable"
    shell: pwsh
    run: |
      try {
        [String]$token = "${{ inputs.tf_token }}"
        [String]$uri = "https://app.terraform.io/api/v2/vars/${{inputs.tf_var_id}}"
        [String]$varId = "${{inputs.tf_var_id}}" 
        [String]$varName = "${{ env.tf_var_name }}"
        [String]$value = "${{ inputs.tf_var_value }}"
        #[String]$description = "Variable to track released application version"
        #[String]$category = "terraform"
        #[String]$hcl = "false"
        #[String]$sensitive = "false"

        $headers = @{
          'Authorization' = "Bearer $token"
          'Content-Type' = 'application/vnd.api+json'
        }
        
        <#
        # Other available properties
          description = "$description"
          category = "$category"
          hcl = "$hcl"
          sensitive = "$sensitive"
        #>
        $myObject = [PSCustomObject]@{
            data = @{
                id = "$varId"
                attributes = @{
                    value = "$value"
                }
                type = "vars"
            }
        }

        <#
        # Lets keep it here. This is perfect example how to make body
        $body = @"
          {
            "data": {
              "id":"$varId",
              "attributes": {
                "key":"$varName",
                "value":"$value",
                "description": "$description",
                "category":"terraform",
                "hcl": $($hcl.toString().ToLower()),
                "sensitive": $($sensitive.toString().ToLower())
              },
              "type":"vars"
            }
          }
      "@#>
        if (!$varName) { 
          Write-Host "Propery 'varName' is null. Removing it from the body."
          $myObject.data.attributes.Remove('varName')
        }
        if (!$value) { 
          Write-Host "Propery 'value' is null. Removing it from the body."
          $myObject.data.attributes.Remove('value')
        }
        <#
          if (!$category) { 
            Write-Host "Propery 'category' is null. Removing it from the body."
            $myObject.data.attributes.Remove('category')
          } 
          if (!$description) { 
            Write-Host "Propery 'description' is null. Removing it from the body."
            $myObject.data.attributes.Remove('description')
          }
          if (!$hcl) { 
            Write-Host "Propery 'hcl' is null. Removing it from the body."
            $myObject.data.attributes.Remove('hcl')
          }
          if (!$sensitive) { 
            Write-Host "Propery 'sensitive' is null. Removing it from the body."
            $myObject.data.attributes.Remove('sensitive')
          } 
        #>                                      
        $body = ConvertTo-Json -InputObject $myObject -Depth 3

        Write-Host "Updating Terraform '$varName' variable value with the new value '$value'"
        try {
          $response = Invoke-WebRequest -Uri $uri -Method Patch -Headers $headers -Body $body
        } catch {
          $msg = "Unexpected response received. Status Code : '$($_.Exception.Response.StatusCode.Value__)'. Description : '$($_.Exception.Response.StatusDescription)'."
          Throw "$msg Details:\r\n$($_)"
        }

        if ($response.statuscode -eq '200') {
          Write-Host "Update successfully done"
        } else {
          $msg = "Unexpected response code '$($response.statuscode)' received."
          Throw $msg          
        }
        
        Write-Host "Completed successfully"
        Exit 0
      } catch {
        Write-Host "[ERR]: $($_.Exception)"
        Write-Host "Execution failed"
        Exit 1
      }      